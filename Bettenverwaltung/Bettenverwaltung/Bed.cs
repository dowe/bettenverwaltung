//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Wenn der Code neu generiert wird, gehen alle Änderungen an dieser Datei verloren
// </auto-generated>
//------------------------------------------------------------------------------
namespace Bettenverwaltung
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Text;

    /// <summary>
    /// Datenbankobjekt für die Betten des KHs
    /// </summary>
	public class Bed : IBedCleaner, IBedView, IComparable<Bed>      
	{
        [Key]
        public int bedId
        {
            get;
            set;
        }

        /// <summary>
        /// 0 Innere_Medizin 1 Orthopädie 2 Pediatrie 3 Gynäkologie, NUTZE EStation!!!
        /// </summary>
        public int station                                     
		{
			get;
			set;
		}

        public bool inRelocation
		{
			get;
			set;
		}

        public String cleaningTime
		{
			get;
			set;
		}

		public virtual Patient patient
		{
			get;
			set;
		}

        /// <summary>
        /// legt eine Patienten in das Bett, Exception falls sich schon ein Patient in dem Bett
        /// befindet oder es gesperrt ist.
        /// </summary>
        /// <param name="patient">Patient der ins Bett gelegt wird oder null für leeres Bett</param>
		public virtual void SetPatient(Patient patient)
		{                                                        
            if (this.patient == null && this.cleaningTime == null)
            {
                this.patient = patient;
            }
            else
            {
                String str = "Bett " + this.bedId + " bereits belegt";
                throw new BedException(str);
            }
		}

		public virtual Patient RemovePatient()
		{
            if (this.patient != null)
            {
                Patient temp = this.patient;
                this.patient = null;
                return temp;
            }
            else
            {
                String str = "Bett " + this.bedId + " ist bereits leer.";
                throw new BedException(str);
            }
		}

		public virtual void SetInRelocation(bool status)
		{
            if (this.inRelocation == true && status == true)
            {
                String str = "Bett " + this.bedId + " bereits für Verlegung geplant.";
                throw new BedException(str);
            }
            else
                this.inRelocation = status;
		}

        /// <summary>
        /// setzt die cleaningtime des Bettenobjekts. Das Bett ist für diese Zeit gesperrt.
        /// </summary>
		public virtual void StartCleaning()                     
		{

            if (this.cleaningTime == null)
                this.cleaningTime = DateTime.Now.ToString();
            else
            {
                String str = "Bett " + this.bedId + " wird bereits gereinigt";
                throw new BedException(str);
            }
		}

        /// <summary>
        ///  setzt die cleaningtime zurück auf null. Diese Funktion wird nur vom DB_Cleaner verwendet
        /// </summary>
		public virtual void StopCleaning()                     
		{
            if (this.cleaningTime != null)
                this.cleaningTime = null;
            else
            {
                String str = "Bett " + this.bedId + " ist schon sauber";
                throw new BedException(str);
            }
		}

        /// <summary>
        /// Überprüfung der cleaningtime. Wird nur vom DB_Cleaner verwendet.
        /// </summary>
        /// <returns>CleaningTime geparsed von String in DateTime</returns>
		public virtual DateTime? GetCleaningTime()               
		{
            return DateTime.Parse(this.cleaningTime);
		}

		public virtual Patient GetPatient()
		{
            return this.patient;
		}

		public virtual EStation GetStation()                    
		{
            return (EStation)this.station;
		}

		public virtual int GetBedId()
		{
            return this.bedId;
		}

		public virtual bool IsEmpty()
		{
            bool ret = false;
            if (this.patient == null)
                ret = true;

            return ret;
		}

		public virtual bool IsGettingCleaned()
		{
            bool ret = true;
            if (this.cleaningTime == null)
                ret = false;
            return ret;
		}

		public virtual bool IsInRelocation()
		{
            return this.inRelocation;
		}


        public int CompareTo(Bed other)
        {
            int res;
            if (bedId > other.bedId) res = 1;
            else if (bedId < other.bedId) res = -1;
            else res = 0;
            return res;
        }
    }
}

